//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ObjcetC.Core.Properties {
    using System;
    
    
    /// <summary>
    ///   一个强类型的资源类，用于查找本地化的字符串等。
    /// </summary>
    // 此类是由 StronglyTypedResourceBuilder
    // 类通过类似于 ResGen 或 Visual Studio 的工具自动生成的。
    // 若要添加或移除成员，请编辑 .ResX 文件，然后重新运行 ResGen
    // (以 /str 作为命令选项)，或重新生成 VS 项目。
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   返回此类使用的缓存的 ResourceManager 实例。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ObjcetC.Core.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   重写当前线程的 CurrentUICulture 属性
        ///   重写当前线程的 CurrentUICulture 属性。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   查找类似 - (&lt;propertyType&gt; &lt;propertyStar&gt;)&lt;propertyName&gt; {
        ///    if (!_&lt;propertyName&gt;) {
        ///        _&lt;propertyName&gt; = [&lt;propertyType&gt; buttonWithType:UIButtonTypeCustom];
        ///        _&lt;propertyName&gt; setTitle:@&quot;按钮&quot; forState:UIControlStateNormal];
        ///        _&lt;propertyName&gt;.titleLabel.font = [UIFont DFLiJinHeiW8OfAuto375Size:18];
        ///[_&lt;propertyName&gt; setTitleColor:[UIUtils colorWithHexString:@&quot;#645742&quot;] forState:UIControlStateNormal];
        ///        [WFUIUtils fixButtonImage:_&lt;propertyName&gt;
        ///                      normalImage:@&quot;btn_comm [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string ButtonCode {
            get {
                return ResourceManager.GetString("ButtonCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 - (&lt;propertyType&gt; &lt;propertyStar&gt;)&lt;propertyName&gt; {
        ///    if (_&lt;propertyName&gt; == nil) {
        ///        _&lt;propertyName&gt; = [[&lt;propertyType&gt; alloc] init];
        ///        _&lt;propertyName&gt;.image = [UIImage imageNamed:@&quot;img_segment_bg&quot;];
        ///
        ///        //UITapGestureRecognizer *labelTapGestureRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(on&lt;propertyName&gt;Click:)];
        ///       // [_&lt;propertyName&gt; addGestureRecognizer:labelTapGestureRecognizer];
        ///        //_&lt;propertyName&gt;.userInteractionEnabled = YES;
        ///  [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string ImageViewCode {
            get {
                return ResourceManager.GetString("ImageViewCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 - (&lt;propertyType&gt; &lt;propertyStar&gt;)&lt;propertyName&gt; {
        ///    if (nil == _&lt;propertyName&gt;) {
        ///        _&lt;propertyName&gt; = [[&lt;propertyType&gt; alloc] init];
        ///        _&lt;propertyName&gt;.text = @&quot;&quot;;
        ///        _&lt;propertyName&gt;.font = [UIFont DFLiJinHeiW8OfAuto375Size:14];
        ///        _&lt;propertyName&gt;.textColor = [UIUtils colorWithHexString:@&quot;#A99674&quot;];
        ///        _&lt;propertyName&gt;.textAlignment = NSTextAlignmentLeft;
        ///    }
        ///    return _&lt;propertyName&gt;;
        ///} 的本地化字符串。
        /// </summary>
        internal static string LabelCode {
            get {
                return ResourceManager.GetString("LabelCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 - (&lt;propertyType&gt; &lt;propertyStar&gt;)&lt;propertyName&gt; {
        ///    if (nil == _&lt;propertyName&gt;) {
        ///        _&lt;propertyName&gt; = [[&lt;propertyType&gt; alloc] init];
        ///    }
        ///    return _&lt;propertyName&gt;;
        ///} 的本地化字符串。
        /// </summary>
        internal static string NormalCode {
            get {
                return ResourceManager.GetString("NormalCode", resourceCulture);
            }
        }
    }
}
